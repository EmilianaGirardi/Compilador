MOV AX, x_global
MOV BX, 2
MUL BX 
MOV @aux1, AX
MOV AX, @aux1
MOV x_global, AX
MOV AX, y_global
MOV BX, 06
MUL BX 
MOV @aux2, AX
MOV AX, @aux2
MOV y_global, AX
FLD z_global
FMUL _float0_
FST @aux3
FLD @aux3
FST z_global
MOV AX, x_global
MOV BX, 2
DIV BX 
MOV @aux4, AX
MOV AX, @aux4
MOV x_global, AX
MOV AX, y_global
MOV BX, 06
DIV BX 
MOV @aux5, AX
MOV AX, @aux5
MOV y_global, AX
FLD z_global
FDIV _float0_
FST @aux6
FLD @aux6
FST z_global
JMP END_START
??errorOverflow:
invoke StdOut, addr errorMsgOverflow
JMP END_START
??errorConversionNegativo:
invoke StdOut, addr errorMsgConversionNegativa
JMP END_START
??errorRestaNegativa:
invoke StdOut, addr errorMsgRestaNegativa
END_START: 
END START