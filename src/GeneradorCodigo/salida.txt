MOV AX, 5
MOV x_global, AX
MOV AX, 48
MOV y_global, AX
MOV AX, 59
MOV z_global, AX
MOV AX, 84
MOV i_global, AX
MOV AX, 95
MOV j_global, AX
MOV AX, 105
MOV k_global, AX
MOV CX, 0 
MOV AX, z_global
CMP AX, 80
SETB CL
MOV CH, 0 
MOV @aux1, CX
CMP @aux1, 0
JE ET15
ET8:
MOV CX, 0 
MOV AX, y_global
CMP AX, 26
SETBE CL
MOV CH, 0 
MOV @aux2, CX
CMP @aux2, 0
JE ET12
JMP salir@.global
ET12:
MOV CX, 0 
MOV  AX, x_global
CMP AX, 25
SETA CL
MOV CH, 0 
MOV @aux3, CX
CMP @aux3, 0
JE ET8
ET15:
MOV AX, 05
MOV var_global, AX
MOV AX, x_global
ADD AX, 25
JC ??errorOverflow
MOV @aux4, AX
MOV AX, @aux4
MOV x_global, AX
salir@_global:
MOV AX, 10
MOV x_global, AX
JMP END_START
??errorOverflow:
invoke StdOut, addr errorMsgOverflow
JMP END_START
??errorConversionNegativo:
invoke StdOut, addr errorMsgConversionNegativa
JMP END_START
??errorRestaNegativa:
invoke StdOut, addr errorMsgRestaNegativa
END_START: 
END START