option casemap :none
include \masm32\include\masm32rt.inc
includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\masm32.lib
.STACK 200h

.DATA
errorMsgOverflow db "Overflow: en suma!.", 10, 0 ;
errorMsgConversionNegativa db "Conversion invalida: no puede convertir un Single negativo a Entero!.", 10, 0 ;
errorMsgRestaNegativa db "Resta invalida: resultado negativo!.", 10, 0 ;
_cadena0_ DB "x es menor a 45", 10, 0
z_global_funcion1 DW ? 
_cadena1_ DB "x es mayor a 45", 10, 0
_cadena2_ DB "FUERA de funcion1", 10, 0
_float0_ DD 1.1e+25
x_global DD ? 
x_global_funcion1 DW ? 
@aux5 DW ? 
@aux4 DW ? 
@aux3 DW ? 
@aux2 DW ? 
@aux1 DW ? 

.CODE
START:
funcion1_global:
MOV AX, [EBP+8]
MOV x_global_funcion1, AX
MOV AX, 50
MOV z_global_funcion1, AX
MOV CX, 0 
MOV  AX, x_global_funcion1
CMP AX, 45
SETA CL
MOV CH, 0 
MOV @aux1, CX
CMP @aux1, 0
JE ET7
invoke StdOut, addr _cadena1_
MOV AX,x_global_funcion1
MOV @aux2, AX
RET
JMP ET9
ET7:
invoke StdOut, addr _cadena0_
ET9:
MOV AX, x_global_funcion1
ADD AX, z_global_funcion1
JC ??errorOverflow
MOV @aux3, AX
MOV AX,@aux3
MOV @aux4, AX
RET
FLD _float0_
FST x_global
MOV EAX, x_global
CMP EAX, 0
JL ??errorConversionNegativo
FLD [x_global]
FISTP @aux5
PUSH @aux5
CALL funcion1_global
invoke StdOut, addr _cadena2_
JMP END_START
??errorOverflow:
invoke StdOut, addr errorMsgOverflow
JMP END_START
??errorConversionNegativo:
invoke StdOut, addr errorMsgConversionNegativa
JMP END_START
??errorRestaNegativa:
invoke StdOut, addr errorMsgRestaNegativa
END_START: 
END START
